---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

includes:
  common: ../common

tasks:

  apply-cluster:
    desc: Apply Talos config across the whole cluster [CLUSTER=required] [MODE=default]
    dir: '{{.KUBERNETES_DIR}}/{{.CLUSTER}}'
    cmds:
      - defer: rm -rf '{{.TEMP_DIR}}'
      - task: common:kubectl_init
        vars:
          CLUSTER: '{{.CLUSTER}}'
          CLUSTER_ROOT: '{{.CLUSTER_ROOT}}'
          TEMP_DIR: '{{.TEMP_DIR}}'
      - task: apply-cluster-internal
        vars:
          CLUSTER_ROOT: "{{.CLUSTER_ROOT}}"
          TALOS_CFG: "{{.TALOS_CFG}}"
          TALOS_SECRETS: "{{.TALOS_SECRETS}}"
          TEMP_DIR: "{{.TEMP_DIR}}"
          MODE: "{{.MODE}}"
    env:
      VAULT: 'kubernetes - {{.CLUSTER}}'
    vars:
      CLUSTER_ROOT: '{{.KUBERNETES_DIR}}/{{.CLUSTER}}'
      TALOS_DIR: './main/talos'
      TALOS_CFG: '{{.TALOS_DIR}}/talconfig.yaml'
      TEMP_DIR:
        sh: mktemp -d
      TALOS_SECRETS: '{{.TEMP_DIR}}/.talos_secrets'
      MODE: '{{.MODE | default "auto"}}'
    requires:
      vars:
        - CLUSTER
    preconditions:
      - test -f ./main/talos/talos.env
      - test -d '{{.KUBERNETES_DIR}}/{{.CLUSTER}}'
      - which op

  apply-cluster-internal:
    internal: true
    cmds:
      - for: { var: IP_ADDRS }
        task: apply-node-internal
        vars:
          IP: "{{.ITEM}}"
          CLUSTER_ROOT: "{{.CLUSTER_ROOT}}"
          TALOS_CFG: "{{.TALOS_CFG}}"
          TALOS_SECRETS: "{{.TALOS_SECRETS}}"
          TEMP_DIR: "{{.TEMP_DIR}}"
          MODE: "{{.MODE}}"
    vars:
      IP_ADDRS:
        sh: talosctl config info --talosconfig '{{.TEMP_DIR}}/talosconfig' --output json | jq --join-output '[.nodes[]] | join(" ")'
    requires:
      vars:
        - CLUSTER_ROOT
        - TALOS_CFG
        - TALOS_SECRETS
        - TEMP_DIR
        - MODE
    preconditions:
      - which jq talosctl

  apply-node:
    desc: Apply Talos config to a node [CLUSTER=required] [IP=required]
    dir: '{{.KUBERNETES_DIR}}/{{.CLUSTER}}'
    cmds:
      - defer: rm -rf '{{.TEMP_DIR}}'
      - task: common:kubectl_init
        vars:
          CLUSTER: '{{.CLUSTER}}'
          CLUSTER_ROOT: '{{.CLUSTER_ROOT}}'
          TEMP_DIR: '{{.TEMP_DIR}}'
      - task: apply-node-internal
        vars:
          IP: "{{.IP}}"
          CLUSTER_ROOT: "{{.CLUSTER_ROOT}}"
          TALOS_CFG: "{{.TALOS_CFG}}"
          TALOS_SECRETS: "{{.TALOS_SECRETS}}"
          TEMP_DIR: "{{.TEMP_DIR}}"
          MODE: "{{.MODE}}"
    env:
      VAULT: 'kubernetes - {{.CLUSTER}}'
    vars:
      CLUSTER_ROOT: '{{.KUBERNETES_DIR}}/{{.CLUSTER}}'
      TALOS_DIR: './main/talos'
      TALOS_CFG: '{{.TALOS_DIR}}/talconfig.yaml'
      TEMP_DIR:
        sh: mktemp -d
      TALOS_SECRETS: '{{.TEMP_DIR}}/.talos_secrets'
      MODE: '{{.MODE | default "auto"}}'
    requires:
      vars:
        - CLUSTER
        - IP
    preconditions:
      - test -f ./main/talos/talos.env
      - test -d '{{.KUBERNETES_DIR}}/{{.CLUSTER}}'
      - which op

  apply-node-internal:
    internal: true
    dir: '{{.CLUSTER_ROOT}}'
    dotenv:
      - '{{.TALOS_SECRETS}}'
    cmds:
      - task: down
        vars:
          CLUSTER_ROOT: "{{.CLUSTER_ROOT}}"
          TEMP_DIR: "{{.TEMP_DIR}}"
      - talhelper gencommand apply --node {{.IP}} --config-file '{{.TALOS_CFG}}' --out-dir '{{.TEMP_DIR}}' --extra-flags '--mode={{.MODE}}' | bash
      - talosctl --nodes {{.IP}} health --wait-timeout=10m --server=false --talosconfig '{{.TEMP_DIR}}/talosconfig'
      - task: up
        vars:
          CLUSTER_ROOT: "{{.CLUSTER_ROOT}}"
          TEMP_DIR: "{{.TEMP_DIR}}"
    requires:
      vars:
        - IP
        - CLUSTER_ROOT
        - TALOS_CFG
        - TALOS_SECRETS
        - TEMP_DIR
        - MODE
    preconditions:
      - which talhelper talosctl
      - test -f "{{.TALOS_CFG}}"
      - talosctl --nodes {{.IP}} get machineconfig --talosconfig '{{.TEMP_DIR}}/talosconfig'

  upgrade-cluster:
    desc: Upgrade Talos across the whole cluster [CLUSTER=main]
    dir: '{{.KUBERNETES_DIR}}/{{.CLUSTER}}'
    cmds:
      - defer: rm -rf '{{.TEMP_DIR}}'
      - task: common:kubectl_init
        vars:
          CLUSTER: '{{.CLUSTER}}'
          CLUSTER_ROOT: '{{.CLUSTER_ROOT}}'
          TEMP_DIR: '{{.TEMP_DIR}}'
      - task: upgrade-cluster-internal
        vars:
          CLUSTER_ROOT: "{{.CLUSTER_ROOT}}"
          TALOS_CFG: "{{.TALOS_CFG}}"
          TALOS_SECRETS: "{{.TALOS_SECRETS}}"
          TEMP_DIR: "{{.TEMP_DIR}}"
    env:
      VAULT: 'kubernetes - {{.CLUSTER}}'
    vars:
      CLUSTER_ROOT: '{{.KUBERNETES_DIR}}/{{.CLUSTER}}'
      TALOS_DIR: './main/talos'
      TALOS_CFG: '{{.TALOS_DIR}}/talconfig.yaml'
      TEMP_DIR:
        sh: mktemp -d
      TALOS_SECRETS: '{{.TEMP_DIR}}/.talos_secrets'
    requires:
      vars:
        - CLUSTER
    preconditions:
      - test -f ./main/talos/talos.env
      - test -d '{{.KUBERNETES_DIR}}/{{.CLUSTER}}'
      - which op

  upgrade-cluster-internal:
    internal: true
    cmds:
      - for: { var: IP_ADDRS }
        task: upgrade-node-internal
        vars:
          IP: "{{.ITEM}}"
          CLUSTER_ROOT: "{{.CLUSTER_ROOT}}"
          TALOS_CFG: "{{.TALOS_CFG}}"
          TALOS_SECRETS: "{{.TALOS_SECRETS}}"
          TEMP_DIR: "{{.TEMP_DIR}}"
    vars:
      IP_ADDRS:
        sh: talosctl config info --talosconfig '{{.TEMP_DIR}}/talosconfig' --output json | jq --join-output '[.nodes[]] | join(" ")'
    requires:
      vars:
        - CLUSTER_ROOT
        - TALOS_CFG
        - TALOS_SECRETS
        - TEMP_DIR
    preconditions:
      - which jq talosctl

  upgrade-node:
    desc: Upgrade Talos on a single node [CLUSTER=required] [IP=required]
    dir: '{{.KUBERNETES_DIR}}/{{.CLUSTER}}'
    cmds:
      - defer: rm -rf '{{.TEMP_DIR}}'
      - task: common:kubectl_init
        vars:
          CLUSTER: '{{.CLUSTER}}'
          CLUSTER_ROOT: '{{.CLUSTER_ROOT}}'
          TEMP_DIR: '{{.TEMP_DIR}}'
      - task: upgrade-node-internal
        vars:
          IP: "{{.IP}}"
          CLUSTER_ROOT: "{{.CLUSTER_ROOT}}"
          TALOS_CFG: "{{.TALOS_CFG}}"
          TALOS_SECRETS: "{{.TALOS_SECRETS}}"
          TEMP_DIR: "{{.TEMP_DIR}}"
    env:
      VAULT: 'kubernetes - {{.CLUSTER}}'
    vars:
      CLUSTER_ROOT: '{{.KUBERNETES_DIR}}/{{.CLUSTER}}'
      TALOS_DIR: './main/talos'
      TALOS_CFG: '{{.TALOS_DIR}}/talconfig.yaml'
      TEMP_DIR:
        sh: mktemp -d
      TALOS_SECRETS: '{{.TEMP_DIR}}/.talos_secrets'
      MODE: '{{.MODE | default "auto"}}'
    requires:
      vars:
        - CLUSTER
        - IP
    preconditions:
      - test -f ./main/talos/talos.env
      - test -d '{{.KUBERNETES_DIR}}/{{.CLUSTER}}'
      - which op

  upgrade-node-internal:
    internal: true
    dir: '{{.CLUSTER_ROOT}}'
    dotenv:
      - '{{.TALOS_SECRETS}}'
    cmds:
      - task: down
        vars:
          CLUSTER_ROOT: "{{.CLUSTER_ROOT}}"
          TEMP_DIR: "{{.TEMP_DIR}}"
      - curl -fsSL -o /dev/null --fail 'https://github.com/siderolabs/talos/releases/tag/{{.TALOS_VERSION}}'
      - talhelper gencommand upgrade --node {{.IP}} --config-file '{{.TALOS_CFG}}' --out-dir '{{.TEMP_DIR}}' --extra-flags "--image='factory.talos.dev/installer{{if eq .TALOS_SECUREBOOT "true"}}-secureboot{{end}}/{{.TALOS_SCHEMATIC_ID}}:{{.TALOS_VERSION}}' --timeout=10m" | bash
      - talosctl --nodes {{.IP}} health --wait-timeout=10m --server=false --talosconfig '{{.TEMP_DIR}}/talosconfig'
      - task: up
        vars:
          CLUSTER_ROOT: "{{.CLUSTER_ROOT}}"
          TEMP_DIR: "{{.TEMP_DIR}}"
    vars:
      TALOS_SCHEMATIC_ID:
        sh: talosctl --nodes {{.IP}} get nodeannotationspecs --talosconfig '{{.TEMP_DIR}}/talosconfig' --output json | jq --raw-output '.spec | select(.key == "extensions.talos.dev/schematic") | .value'
      TALOS_SECUREBOOT:
        sh: talosctl --nodes {{.IP}} get securitystate --talosconfig '{{.TEMP_DIR}}/talosconfig' --output=jsonpath='{.spec.secureBoot}'
      TALOS_VERSION:
        sh: yq --raw-output '.talosVersion' "{{.CLUSTER_ROOT}}/{{.TALOS_CFG}}"
    requires:
      vars:
        - IP
        - CLUSTER_ROOT
        - TALOS_CFG
        - TALOS_SECRETS
        - TEMP_DIR
    preconditions:
      - which yq talhelper talosctl
      - test -f "{{.TALOS_CFG}}"
      - talosctl --nodes {{.IP}} get machineconfig --talosconfig '{{.TEMP_DIR}}/talosconfig'
      - talosctl config info --talosconfig '{{.TEMP_DIR}}/talosconfig'

  upgrade-k8s:
    desc: Upgrade Kubernetes across the whole cluster [CLUSTER=required] [VERSION=required]
    dir: '{{.KUBERNETES_DIR}}/{{.CLUSTER}}'
    cmds:
      - defer: rm -rf '{{.TEMP_DIR}}'
      - task: common:kubectl_init
        vars:
          CLUSTER: '{{.CLUSTER}}'
          CLUSTER_ROOT: '{{.CLUSTER_ROOT}}'
          TEMP_DIR: '{{.TEMP_DIR}}'
      - task: down
        vars:
          CLUSTER_ROOT: "{{.CLUSTER_ROOT}}"
          TEMP_DIR: "{{.TEMP_DIR}}"
      - task: upgrade-k8s-internal
        vars:
          IP: "{{.IP}}"
          CLUSTER_ROOT: "{{.CLUSTER_ROOT}}"
          TALOS_CFG: "{{.TALOS_CFG}}"
          TALOS_SECRETS: "{{.TALOS_SECRETS}}"
          TEMP_DIR: "{{.TEMP_DIR}}"
      - task: up
        vars:
          CLUSTER_ROOT: "{{.CLUSTER_ROOT}}"
          TEMP_DIR: "{{.TEMP_DIR}}"
    env:
      VAULT: 'kubernetes - {{.CLUSTER}}'
    vars:
      CLUSTER_ROOT: '{{.KUBERNETES_DIR}}/{{.CLUSTER}}'
      TALOS_DIR: './main/talos'
      TALOS_CFG: '{{.TALOS_DIR}}/talconfig.yaml'
      TEMP_DIR:
        sh: mktemp -d
      TALOS_SECRETS: '{{.TEMP_DIR}}/.talos_secrets'
    requires:
      vars:
        - CLUSTER
        - IP
    preconditions:
      - test -f ./main/talos/talos.env
      - test -d '{{.KUBERNETES_DIR}}/{{.CLUSTER}}'
      - which op

  upgrade-k8s-internal:
    internal: true
    dir: '{{.CLUSTER_ROOT}}'
    dotenv:
      - '{{.TALOS_SECRETS}}'
    cmds:
      - curl -fsSL -o /dev/null --fail 'https://github.com/siderolabs/kubelet/releases/tag/{{.KUBERNETES_VERSION}}'
      - talhelper gencommand upgrade-k8s --config-file '{{.TALOS_CFG}}' --out-dir '{{.TEMP_DIR}}' --extra-flags "--to '{{.KUBERNETES_VERSION}}'" | bash
      - talosctl --nodes {{.TALOS_CONTROLLER}} health --wait-timeout=10m --server=false --talosconfig '{{.TEMP_DIR}}/talosconfig'
    vars:
      TALOS_CONTROLLER:
        sh: talosctl config info --talosconfig '{{.TEMP_DIR}}/talosconfig' --output json | jq --raw-output '.endpoints[]' | shuf -n 1
      KUBERNETES_VERSION:
        sh: yq --raw-output '.kubernetesVersion' "{{.CLUSTER_ROOT}}/{{.TALOS_CFG}}"
    requires:
      vars:
        - CLUSTER_ROOT
        - TALOS_CFG
        - TALOS_SECRETS
        - TEMP_DIR
    preconditions:
      - which yq talhelper talosctl
      - test -f "{{.TALOS_CFG}}"
      - talosctl --nodes {{.TALOS_CONTROLLER}} get machineconfig --talosconfig '{{.TEMP_DIR}}/talosconfig'
      - talosctl config info --talosconfig '{{.TEMP_DIR}}/talosconfig'

  reboot-cluster:
    desc: Reboot Talos nodes across the whole cluster [CLUSTER=requied]
    dir: '{{.KUBERNETES_DIR}}/{{.CLUSTER}}'
    cmds:
      - defer: rm -rf '{{.TEMP_DIR}}'
      - task: common:kubectl_init
        vars:
          CLUSTER: '{{.CLUSTER}}'
          CLUSTER_ROOT: '{{.CLUSTER_ROOT}}'
          TEMP_DIR: '{{.TEMP_DIR}}'
      - task: reboot-cluster-internal
        vars:
          CLUSTER_ROOT: "{{.CLUSTER_ROOT}}"
          TALOS_CFG: "{{.TALOS_CFG}}"
          TALOS_SECRETS: "{{.TALOS_SECRETS}}"
          TEMP_DIR: "{{.TEMP_DIR}}"
    env:
      VAULT: 'kubernetes - {{.CLUSTER}}'
    vars:
      CLUSTER_ROOT: '{{.KUBERNETES_DIR}}/{{.CLUSTER}}'
      TALOS_DIR: './main/talos'
      TALOS_CFG: '{{.TALOS_DIR}}/talconfig.yaml'
      TEMP_DIR:
        sh: mktemp -d
      TALOS_SECRETS: '{{.TEMP_DIR}}/.talos_secrets'
    requires:
      vars:
        - CLUSTER
    preconditions:
      - test -f ./main/talos/talos.env
      - test -d '{{.KUBERNETES_DIR}}/{{.CLUSTER}}'
      - which op

  reboot-cluster-internal:
    internal: true
    cmds:
      - for: { var: IP_ADDRS }
        task: reboot-node-internal
        vars:
          IP: "{{.ITEM}}"
          CLUSTER_ROOT: "{{.CLUSTER_ROOT}}"
          TALOS_CFG: "{{.TALOS_CFG}}"
          TALOS_SECRETS: "{{.TALOS_SECRETS}}"
          TEMP_DIR: "{{.TEMP_DIR}}"
    vars:
      IP_ADDRS:
        sh: talosctl config info --output json | jq --join-output '[.nodes[]] | join(" ")'
    requires:
      vars:
        - CLUSTER_ROOT
        - TALOS_CFG
        - TALOS_SECRETS
        - TEMP_DIR
    preconditions:
      - which jq talosctl

  reboot-node:
    desc: Reboot Talos on a single node [CLUSTER=required] [IP=required] [MODE=default]
    dir: '{{.KUBERNETES_DIR}}/{{.CLUSTER}}'
    cmds:
      - defer: rm -rf '{{.TEMP_DIR}}'
      - task: common:kubectl_init
        vars:
          CLUSTER: '{{.CLUSTER}}'
          CLUSTER_ROOT: '{{.CLUSTER_ROOT}}'
          TEMP_DIR: '{{.TEMP_DIR}}'
      - task: reboot-node-internal
        vars:
          IP: "{{.IP}}"
          CLUSTER_ROOT: "{{.CLUSTER_ROOT}}"
          TALOS_SECRETS: "{{.TALOS_SECRETS}}"
          TEMP_DIR: "{{.TEMP_DIR}}"
          MODE: "{{.MODE}}"
    env:
      VAULT: 'kubernetes - {{.CLUSTER}}'
    vars:
      CLUSTER_ROOT: '{{.KUBERNETES_DIR}}/{{.CLUSTER}}'
      TEMP_DIR:
        sh: mktemp -d
      TALOS_SECRETS: '{{.TEMP_DIR}}/.talos_secrets'
      MODE: '{{.MODE | default "default"}}'
    requires:
      vars:
        - CLUSTER
        - IP
    preconditions:
      - test -f ./main/talos/talos.env
      - test -d '{{.KUBERNETES_DIR}}/{{.CLUSTER}}'
      - which op

  reboot-node-internal:
    internal: true
    dir: '{{.CLUSTER_ROOT}}'
    dotenv:
      - '{{.TALOS_SECRETS}}'
    cmds:
      - task: down
        vars:
          CLUSTER_ROOT: "{{.CLUSTER_ROOT}}"
          TEMP_DIR: "{{.TEMP_DIR}}"
      - talosctl --nodes {{.IP}} reboot --talosconfig '{{.TEMP_DIR}}/talosconfig' --mode={{.MODE}}
      - talosctl --nodes {{.IP}} health --talosconfig '{{.TEMP_DIR}}/talosconfig' --wait-timeout=10m --server=false
      - task: up
        vars:
          CLUSTER_ROOT: "{{.CLUSTER_ROOT}}"
          TEMP_DIR: "{{.TEMP_DIR}}"
    requires:
      vars:
        - IP
        - CLUSTER_ROOT
        - TALOS_SECRETS
        - TEMP_DIR
        - MODE
    preconditions:
      - which talosctl
      - talosctl --nodes {{.IP}} get machineconfig --talosconfig '{{.TEMP_DIR}}/talosconfig'
      - talosctl config info --talosconfig '{{.TEMP_DIR}}/talosconfig'

  shutdown-cluster:
    desc: Shutdown Talos across the whole cluster [CLUSTER=required]
    prompt: Shutdown the Talos cluster '{{.CLUSTER}}' ... continue?
    dir: '{{.KUBERNETES_DIR}}/{{.CLUSTER}}'
    cmds:
      - defer: rm -rf '{{.TEMP_DIR}}'
      - task: common:talosctl_init
        vars:
          CLUSTER: '{{.CLUSTER}}'
          CLUSTER_ROOT: '{{.CLUSTER_ROOT}}'
          TEMP_DIR: '{{.TEMP_DIR}}'
      - task: shutdown-cluster-internal
        vars:
          CLUSTER_ROOT: "{{.CLUSTER_ROOT}}"
          TALOS_CFG: "{{.TALOS_CFG}}"
          TALOS_SECRETS: "{{.TALOS_SECRETS}}"
          TEMP_DIR: "{{.TEMP_DIR}}"
    env:
      VAULT: 'kubernetes - {{.CLUSTER}}'
    vars:
      CLUSTER_ROOT: '{{.KUBERNETES_DIR}}/{{.CLUSTER}}'
      TALOS_DIR: './main/talos'
      TALOS_CFG: '{{.TALOS_DIR}}/talconfig.yaml'
      TEMP_DIR:
        sh: mktemp -d
      TALOS_SECRETS: '{{.TEMP_DIR}}/.talos_secrets'
    requires:
      vars:
        - CLUSTER
    preconditions:
      - test -f ./main/talos/talos.env
      - test -d '{{.KUBERNETES_DIR}}/{{.CLUSTER}}'
      - which op

  shutdown-cluster-internal:
    internal: true
    dir: '{{.CLUSTER_ROOT}}'
    dotenv:
      - '{{.TALOS_SECRETS}}'
    cmds:
      - talosctl shutdown --nodes '{{.IP_ADDRS}}' --talosconfig '{{.TEMP_DIR}}/talosconfig' --force
    vars:
      IP_ADDRS:
        sh: talosctl config info --talosconfig '{{.TEMP_DIR}}/talosconfig' --output json | jq --join-output '[.nodes[]] | join(",")'
    requires:
      vars:
        - CLUSTER_ROOT
        - TALOS_SECRETS
        - TEMP_DIR
    preconditions:
      - which jq talosctl
      - talosctl --nodes '{{.IP_ADDRS}}' get machineconfig --talosconfig '{{.TEMP_DIR}}/talosconfig'
      - talosctl config info --talosconfig '{{.TEMP_DIR}}/talosconfig'

  reset-cluster:
    desc: Reset Talos across the whole cluster [CLUSTER=required]
    prompt: Reset the Talos cluster '{{.CLUSTER}}' ... continue?
    dir: '{{.KUBERNETES_DIR}}/{{.CLUSTER}}'
    cmds:
      - defer: rm -rf '{{.TEMP_DIR}}'
      - task: common:talosctl_init
        vars:
          CLUSTER: '{{.CLUSTER}}'
          CLUSTER_ROOT: '{{.CLUSTER_ROOT}}'
          TEMP_DIR: '{{.TEMP_DIR}}'
      - task: reset-cluster-internal
        vars:
          CLUSTER_ROOT: "{{.CLUSTER_ROOT}}"
          TALOS_CFG: "{{.TALOS_CFG}}"
          TALOS_SECRETS: "{{.TALOS_SECRETS}}"
          TEMP_DIR: "{{.TEMP_DIR}}"
    env:
      VAULT: 'kubernetes - {{.CLUSTER}}'
    vars:
      CLUSTER_ROOT: '{{.KUBERNETES_DIR}}/{{.CLUSTER}}'
      TALOS_DIR: './main/talos'
      TALOS_CFG: '{{.TALOS_DIR}}/talconfig.yaml'
      TEMP_DIR:
        sh: mktemp -d
      TALOS_SECRETS: '{{.TEMP_DIR}}/.talos_secrets'
    requires:
      vars:
        - CLUSTER
    preconditions:
      - test -f ./main/talos/talos.env
      - test -d '{{.KUBERNETES_DIR}}/{{.CLUSTER}}'
      - which op

  reset-cluster-internal:
    internal: true
    dir: '{{.CLUSTER_ROOT}}'
    dotenv:
      - '{{.TALOS_SECRETS}}'
    cmd: talhelper gencommand reset --config-file '{{.TALOS_CFG}}' --out-dir '{{.TEMP_DIR}}' --extra-flags='--graceful=false' | bash
    requires:
      vars:
        - CLUSTER_ROOT
        - TALOS_SECRETS
        - TALOS_CFG
        - TEMP_DIR
    preconditions:
      - talosctl config info --talosconfig '{{.TEMP_DIR}}/talosconfig'
      - test -f {{.TEMP_DIR}}/talosconfig
      - which talosctl talhelper

  reset-node:
    desc: Reset Talos on a single node [CLUSTER=required] [IP=required]
    prompt: Reset Talos node '{{.IP}}' on the '{{.CLUSTER}}' cluster ... continue?
    cmds:
      - defer: rm -rf '{{.TEMP_DIR}}'
      - task: common:talosctl_init
        vars:
          CLUSTER: '{{.CLUSTER}}'
          CLUSTER_ROOT: '{{.CLUSTER_ROOT}}'
          TEMP_DIR: '{{.TEMP_DIR}}'
      - task: reset-node-internal
        vars:
          IP: "{{.IP}}"
          CLUSTER_ROOT: "{{.CLUSTER_ROOT}}"
          TALOS_SECRETS: "{{.TALOS_SECRETS}}"
          TEMP_DIR: "{{.TEMP_DIR}}"
    env:
      VAULT: 'kubernetes - {{.CLUSTER}}'
    vars:
      CLUSTER_ROOT: '{{.KUBERNETES_DIR}}/{{.CLUSTER}}'
      TEMP_DIR:
        sh: mktemp -d
      TALOS_SECRETS: '{{.TEMP_DIR}}/.talos_secrets'
    requires:
      vars:
        - CLUSTER
        - IP
    preconditions:
      - test -f {{.KUBERNETES_DIR}}/{{.CLUSTER}}/main/talos/talos.env
      - test -d '{{.KUBERNETES_DIR}}/{{.CLUSTER}}'
      - which op

  reset-node-internal:
    internal: true
    dir: '{{.CLUSTER_ROOT}}'
    dotenv:
      - '{{.TALOS_SECRETS}}'
    cmds:
      - talosctl --nodes '{{.IP}}' reset --talosconfig '{{.TEMP_DIR}}/talosconfig' --graceful=false
    requires:
      vars:
        - IP
        - CLUSTER_ROOT
        - TALOS_SECRETS
        - TEMP_DIR
    preconditions:
      - which talosctl
      - talosctl --nodes '{{.IP}}' get machineconfig --talosconfig '{{.TEMP_DIR}}/talosconfig'
      - talosctl config info --talosconfig '{{.TEMP_DIR}}/talosconfig'

  down:
    internal: true
    dir: '{{.CLUSTER_ROOT}}'
    env:
      KUBECONFIG: '{{.TEMP_DIR}}/kubeconfig'
    cmds:
      - until kubectl wait jobs --all --all-namespaces --for=condition=complete --timeout=5m &>/dev/null; do sleep 5; done
    status:
      - test "$(kubectl get jobs --all-namespaces -o json | jq '.items | length')" -eq 0
    requires:
      vars:
        - CLUSTER_ROOT
        - TEMP_DIR
    preconditions:
      - test -f '{{.TEMP_DIR}}/kubeconfig'
      - which kubectl jq

  up:
    internal: true
    dir: '{{.CLUSTER_ROOT}}'
    env:
      KUBECONFIG: '{{.TEMP_DIR}}/kubeconfig'
    cmds:
      - until kubectl wait jobs --all --all-namespaces --for=condition=complete --timeout=5m &>/dev/null; do sleep 5; done
    status:
      - test "$(kubectl get jobs --all-namespaces -o json | jq '.items | length')" -eq 0
    requires:
      vars:
        - CLUSTER_ROOT
        - TEMP_DIR
    preconditions:
      - test -f '{{.TEMP_DIR}}/kubeconfig'
      - which kubectl jq
