---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: grafana-oncall
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.6.0
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    controllers:
      engine:
        replicas: 1
        strategy: RollingUpdate
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          engine:
            image: &image
              repository: grafana/oncall
              tag: v1.13.11@sha256:159b6b836fed0c9b61ff4014ad65c05b56500f31283c42de97dbe58679d33391
            env: &env
              BASE_URL: "https://${CLOUDFLARE_SUBDOMAIN}.${CLOUDFLARE_DOMAIN}"
              DJANGO_SETTINGS_MODULE: settings.helm
              AMIXR_DJANGO_ADMIN_PATH: admin
              OSS: "True"
              DETACHED_INTEGRATIONS_SERVER: "False"
              BROKER_TYPE: redis
              GRAFANA_API_URL: "http://grafana.observability.svc.cluster.local"
              UWSGI_LISTEN: "1024"
              FEATURE_SLACK_INTEGRATION_ENABLED: "False"
              FEATURE_TELEGRAM_INTEGRATION_ENABLED: "False"
              CELERY_WORKER_QUEUE: "default,critical,long,webhook,retry,celery,grafana"
              CELERY_WORKER_CONCURRENCY: "1"
              CELERY_WORKER_MAX_TASKS_PER_CHILD: "100"
              CELERY_WORKER_SHUTDOWN_INTERVAL: "65m"
              CELERY_WORKER_BEAT_ENABLED: "True"
              DATABASE_TYPE: sqlite3
              DATABASE_NAME: /data/oncall.db
              REDIS_PROTOCOL: redis
              REDIS_HOST: redis-master.redis.svc.cluster.local
              REDIS_PORT: 6379
              REDIS_DATABASE: 0
              FEATURE_EMAIL_INTEGRATION_ENABLED: "False"
              FEATURE_PROMETHEUS_EXPORTER_ENABLED: "False"
            envFrom: &envFrom
              - secretRef:
                  name: grafana-oncall-secret
            command: [ "/bin/sh", "-c" ]
            args: [ "python manage.py create_sqlite_db && python manage.py migrate && uwsgi --ini uwsgi.ini" ]
            probes:
              liveness:
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /health/
                    port: &port 8080
                  initialDelaySeconds: 0
                  periodSeconds: 60
                  timeoutSeconds: 3
                  failureThreshold: 3
              readiness:
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ready/
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 3
                  failureThreshold: 3
              startup:
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /startupprobe/
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 3
            securityContext: &securityContext
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources: &resources
              requests:
                cpu: 25m
              limits:
                memory: 512Mi
      celery:
        replicas: 1
        strategy: RollingUpdate
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          celery:
            image: *image
            env: *env
            envFrom: *envFrom
            command: ["./celery_with_exporter.sh"]
            probes:
              liveness:
                enabled: true
                custom: true
                spec:
                  exec:
                    command: [
                      "bash",
                      "-c",
                      "celery -A engine inspect ping -d celery@$HOSTNAME"
                    ]
                  initialDelaySeconds: 30
                  periodSeconds: 300
                  timeoutSeconds: 10
                  failureThreshold: 3
            securityContext: *securityContext
            resources: *resources
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        seccompProfile: { type: RuntimeDefault }
    service:
      engine:
        controller: engine
        ports:
          http:
            port: *port
    persistence:
      database:
        existingClaim: grafana-oncall-data
        globalMounts:
          - path: /data
      engine-tmpfs:
        type: emptyDir
        advancedMounts:
          engine:
            engine:
              - path: /tmp
      celery-tmpfs:
        type: emptyDir
        advancedMounts:
          celery:
            celery:
              - path: /tmp
